path crypt,logging;

DECLARE key EXTERNAL CHARACTER;


CREATE COMPUTE MODULE bf_mf_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
	
		--declare url CHARACTER;
		declare ref REFERENCE to InputRoot.JSON.Data;
		DECLARE code INTEGER InputRoot.HTTPInputHeader.Code;

		declare query CHARACTER 'select URL from ACCOUNT where CODE=?';
		set Environment.url = PASSTHRU(query,code);
		
		SET OutputLocalEnvironment.Destination.HTTP.RequestURL=Environment.url.URL;
		--SET OutputLocalEnvironment.Destination.HTTP.RequestURL='http://';
		DECLARE url1, enc CHARACTER;
		SET url1 = Environment.url.URL;
		
		call channel1(ApplicationLabel,MessageFlowLabel,ref.code,'channel_request',url1);
			
		DECLARE data CHARACTER cast(ASBITSTREAM(ref) as CHARACTER CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding);
		call encrypt(data, key) into enc;
		SET OutputRoot.JSON.Data.enc = enc;
		
		
		
		

	END;

--	create PROCEDURE channel1(in app CHARACTER,in mf CHARACTER,in code CHARACTER ,in type CHARACTER,in url CHARACTER)
--	LANGUAGE DATABASE
--	EXTERNAL NAME "CHANNEL";
	

END MODULE;